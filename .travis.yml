# Travis CI (MIT License) configuration file
# @link https://travis-ci.org/

# Tell Travis to use new container-based infrastructure
sudo: false

# Declare project language.
# @link http://about.travis-ci.org/docs/user/languages/php/
language: php

# Declare versions of PHP to use. Use one decimal max.
php:
    - "5.6"
    - "7.0"

# Specify when travis should build.
# Mainly, we don't want to build on feature branches, just on master, vip, and
# during pull requests.
branches:
  only:
    - master

matrix:
    include:
        - php: 5.6
        - php: 7
    fast_finish: true

# Use this to prepare your build for testing.
# e.g. copy database configurations, environment variables, etc.
# Failures in this section will result in build status 'errored'.
before_script:
    # Install CodeSniffer for WordPress Coding Standards checks.
    - git clone https://github.com/squizlabs/PHP_CodeSniffer.git php-codesniffer
    # Install WordPress Coding Standards.
    - git clone https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards.git wordpress-coding-standards
    # Hop into CodeSniffer directory.
    - cd php-codesniffer
    # Set install path for WordPress Coding Standards
    # @link https://github.com/squizlabs/PHP_CodeSniffer/blob/4237c2fc98cc838730b76ee9cee316f99286a2a7/CodeSniffer.php#L1941
    - scripts/phpcs --config-set installed_paths ../wordpress-coding-standards
    # Hop into themes directory.
    - cd /tmp/wordpress/src/wp-content/themes/$theme_slug/
    # After CodeSniffer install you should refresh your path.
    - phpenv rehash

# Run test script commands.
# Default is specific to project language.
# All commands must exit with code 0 on success. Anything else is considered failure.
script:
    # Search for PHP syntax errors.
    - find . -type "f" -iname "*.php" | xargs -L "1" php -l
    # WordPress Coding Standards
    # @link https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards
    # @link http://pear.php.net/package/PHP_CodeSniffer/
    # -p flag: Show progress of the run.
    # -s flag: Show sniff codes in all reports.
    # -v flag: Print verbose output.
    # -n flag: Do not print warnings (shortcut for --warning-severity=0)
    # --standard: Use WordPress as the standard.
    # --extensions: Only sniff PHP files.
    - $WP_DEVELOP_DIR/php-codesniffer/scripts/phpcs -p -s -v -n . --standard=./codesniffer.ruleset.xml --extensions=php

# Receive notifications for build results.
# @link http://docs.travis-ci.com/user/notifications/#Email-notifications
notifications:
    email: false
